import Foundation

var greeting = "Hello, everybody who is looking my solutions rn"

// 1- Verilen Stringin palindrome olup olmadığını kontrol eden fonksiyonu yazınız.

func isPalindrome(param:String) -> Bool  {
   
    let char = Array(param)
    var first = 0
    var second = char.count - 1
    
    while (first < second) {
        
        if char[first] == char[second] {
            first += 1
            second -= 1
        } else if char[first] == " "{
            first += 1
        } else if char[second] == " "{
            second -= 1
        }
        else {
            print("\(param) is not palindrome :(")
            return false
        }
    }
    print("\(param) is palindrome :)")
    return true
     
}
isPalindrome(param: "r a d a rff")


// 2- Verilen bir array içerisindeki her bir elemanın sayısını veren bir fonksiyon yazınız.

func arrayCount (param:Array<String>) {

    var elementCount:[String:Int] = [:]
    
    for i in param {

        if elementCount.contains{ $0.key == i } {
            
            elementCount[i] = elementCount[i]! + 1
        } else {
            
            elementCount[i] = 1
            
        }
    }
    print(elementCount)
}

arrayCount(param:["1","1","7","1","5","5","7"])



// 3- "*" Karakterinden piramit oluşturan fonksiyonu yazınız. Parametre olarak kaç katlı olacağı alınsın.

func makePyramid (layer:Int) {

    var star = 0
    
    for _ in 0...layer {
        for _ in 0..<star {
            print("*",terminator: "")
        }
        star+=1
        print("")
    }
}

makePyramid(layer: 4)

// 4 - Yazdığınız piramit fonksiyonun çıktısını ortalı olacak şekilde yazınız

func makeAnotherPyramid(value:Int) {
    
    for i in 1...value
    {
        for _ in stride(from: value, to: i, by: -1)
        {
            print(terminator : " ")
        }

        for _ in 1...i
        {
            print("*",terminator : " ")
        }
        print(" ")
    }
}

makeAnotherPyramid(value: 10)

// 5 - ProjectEuler.net
//Q1) If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.

func sumOfNaturalNumbers() -> Int
{
    var sum = 0
    for number in 0..<1000 {
        
        if number%3 == 0 || number%5 == 0 {
            
            sum += number
        }
    }
    
    return sum
}

print(sumOfNaturalNumbers())

//
//Q2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms


func sumFibonacci(a:Int)  -> Int {
var first = 1
var second = 2
var sum = 3
var newSum = 0
    
    while sum < a {
        
        sum = first + second
        first = second
        second = sum
            
        if sum%2 == 0 {
            
        newSum += sum + 2
    }
}
    return newSum
}

print(sumFibonacci(a: 70))


// Q3) The prime factors of 13195 are 5, 7, 13 and 29.
//What is the largest prime factor of the number 600851475143 ?

func findLargestPrime(x:Int)  {
    
   var x2 = x
    
    var minPrime = 2
    
    var largestPrime=0

    while minPrime <= x2 {
        
        if isPrime(val: minPrime) {
            
            while x2 % minPrime == 0 {
              x2 = x2/minPrime
              largestPrime=minPrime
            }
        }
       minPrime=minPrime+1
    }
    print(largestPrime)
}
    
    func isPrime(val:Int) -> Bool{
        
        for i in 1..<val {
            
            if val % i == i {
                return false
            }
    }
        
        return true
    }
    
findLargestPrime(x:13195)

